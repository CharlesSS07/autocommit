function get_hidden_key {
	# hash our key and the current 10 second interal in the epoch
	# creates a new key that the server will know, and expires in 10 seconds
	# we use the part before the : as the identifier, and the part after as the hashed part
	local identifier=$(echo $AUTOCOMMIT_KEY | cut -f 1 -d :)
	local ten_second_interval=$(ruby -e 'puts (Time.now.to_f/10).truncate()')
	local hidden_key=$(echo $(echo $AUTOCOMMIT_KEY | cut -f 2 -d :)$ten_second_interval | md5)
	echo $identifier:$hidden_key
	# return the hidden key
	# should be secure enough, since we already have ssl
	# md5 isn't secure because hash collisions can be found.
	# since ours changes every 10 seconds, it is essentially secure
	# also, md5 has a simple plain js implementation, and is "generally faster than sha256"
}

function generate_commit_message {
	local diff=$(cat < /dev/stdin)
	local response_code=$(echo $diff | curl --write-out "%{http_code}" --silent \
		"$API_ENDPOINT/autocommit?key=$(get_hidden_key)" \
		-H 'Content-Type: application/json' \
		--data @$- \
		--output $1)
	# gets the autocommit message from my api, stores in $1
	# also returns response_code, which is the http response status code of the request
	# should be "200" for "ok"
}

function prepare-commit-msg {
	
	# read diff file from stdin
	local diff=$(get_last_diff)
	
	local completion=$(mktemp /tmp/$SCRIPT_NAME.completions.XXXXXX)
	
	# generate commit message, store http request output in response_code
	local response_code=$(cat $diff | generate_commit_message $completion)
	
	if [[ "$response_code" -he 200 ]] ; then
		# response was not ok
		echo "Autocommit failed. Nothing written to commit message. Error($response_code):" >&2
		cat $completion >&2
		# don't exit 1, so user can still write messages
	else
		# response was ok, append completion to the commit message file
		cat $completeion >> $COMMIT_MSG_FILE
		echo " (autocommit-enabled)" >> $COMMIT_MSG_FILE
		# comment out to prevent autocommit-enabled from showing up in commit
	fi
	
	#rm $completion
	#rm $diff
}
