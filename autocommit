#!/usr/bin/env bash

SCRIPT_NAME="autocommit"

SITE_MAIN="https://u1319464.wixsite.com/git-autocommit--chan"

API_ENDPOINT="$SITE_MAIN/_functions-dev/"

if [[ -z "${AUTOCOMMIT_KEY}" ]]; then
	
	echo "$SCRIPT_NAME: You must register this command line (no Autocommit key detected). Go to this url if the browser hasn't already opened."
	
	AUTOCOMMIT_KEY=$(openssl rand -base64 8):$(openssl rand -base64 32)
	
	SITE_CLI_LOGIN="$SITE_MAIN/cli-login?key=$AUTOCOMMIT_KEY"
	
	open "$SITE_CLI_LOGIN"
	
	echo
	echo "$SITE_CLI_LOGIN"
	echo
	echo "Then, append the following to your ~/.bashrc or ~/.zshrc, and re-run $SCRIPT_NAME."
	echo
	echo "export AUTOCOMMIT_KEY=\"$AUTOCOMMIT_KEY\" # Git Autocommit user key."
	echo
	exit
else
	echo "Found Autocommit key"
fi

function get_hidden_key {
	# hash our key and the current 10 second interal in the epoch
	# creates a new key that the server will know, and expires in 10 seconds
	# we use the part before the : as the identifier, and the part after as the hashed part
	local identifier=$(echo $AUTOCOMMIT_KEY | cut -f 1 -d :)
	local ten_second_interval=$(ruby -e 'puts (Time.now.to_f/10).truncate()')
	local hidden_key=$(echo $(echo $AUTOCOMMIT_KEY | cut -f 2 -d :)$ten_second_interval | md5)
	echo $identifier:$hidden_key # return the hidden key
	# should be secure enough, since we already have ssl
	# md5 isn't secure because hash collisions can be found.
	# since ours changes every 10 seconds, it is essentially secure
	# also, md5 has a simple plain js implementation, and is "generally faster than sha256"
}

diff=$(mktemp /tmp/diff.XXXXXX)
git diff $(git log -n 1 | grep "^commit" | cut -f 2 -d " ") > $diff
# makes the diff between HEAD and the staged working tree

commit_message=$(mktemp /tmp/commit-message.XXXXXX)
# where to store the autocommit message
# gpt could return something that needs to be escaped
# shove it into a file to simplify things

curl -s \
	"https://u1319464.wixsite.com/git-autocommit--chan/_functions-dev/autocommit?key=$(get_hidden_key)" \
	-H 'Content-Type: application/json' \
	--data @$diff \
	> $commit_message
# gets the autocommit message from my api
# we don't have any login system yet
# currently outputs nothing if key is wrong

# AVERAGE_WORDS_PER_1000_TOKENS=750.0
# WORDS_IN_COMMIT_DIFF=$(cat $diff | wc -w).0
# COST_PER_TOKEN=0.02 # for davinci
# APPROX_MIN_DOLLAR_COST=$(perl -e "print($WORDS_IN_COMMIT_DIFF/$AVERAGE_WORDS_PER_1000_TOKENS*$COST_PER_TOKEN)")
# this is an approximation of the number of tokens used by english sentences however we will need to get a better estimate because we are processing code, not english
# echo "Minimum cost of commit: \$" $APPROX_MIN_DOLLAR_COST
# echo "TODO add option to approve/deny dollar amount, and change models."

git commit -eF $commit_message
# sets the commit message to our autocommit message, and then opens it for editing in git's default editor

cat $commit_message

# rm $commit_message
# rm $diff
