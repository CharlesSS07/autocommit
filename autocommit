#!/usr/bin/env bash

# this script installs autocommit, by chopping off the first 30 lines of itself, and copying the rest into an autocommit hook file in the .git/hooks folder, and adding a redirect at the bottom of the .git/hooks/prepare-commit-msg hook (creating files if they are not already present)

# TODO: add command line verbs like install, uninstall, help

REPO_ROOT=$(git rev-parse --show-toplevel)
AUTOCOMMIT_HOOK=$REPO_ROOT/.git/hooks/autocommit
GIT_HOOK=$REPO_ROOT/.git/hooks/prepare-commit-msg

if test -f "$AUTOCOMMIT_HOOK"; then
	echo "Updating autocommit installation."
	rm $AUTOCOMMIT_HOOK
fi

touch $AUTOCOMMIT_HOOK
chmod a+x $AUTOCOMMIT_HOOK
touch $GIT_HOOK
chmod a+x $GIT_HOOK
echo "#!/usr/bin/env bash" > $AUTOCOMMIT_HOOK # make first line shebang
tail -n +30 $BASH_SOURCE >> $AUTOCOMMIT_HOOK  # copy in the hook logic, and api call
echo "#!/usr/bin/env bash" >> $GIT_HOOK
echo "$AUTOCOMMIT_HOOK \$@" >> $GIT_HOOK      # call the autocommit hook from the prepare-commit-msg hook

exit

# SCRIPT BELOW LINE 30 IS HOOK GIT HOOK














SCRIPT_NAME="autocommit"

SITE_MAIN="https://u1319464.wixsite.com/git-auto-commit"

API_ENDPOINT="$SITE_MAIN/_functions-dev/"

AUTOCOMMIT_KEY=$(git config --global user.autocommitkey)

# check if autocommit key was found
if [[ -z "${AUTOCOMMIT_KEY}" ]]; then
	# the key was not found, must have user install
	echo "$SCRIPT_NAME: You must register this command line (no Autocommit key detected). Go to this url if the browser hasn't already opened."
	
	AUTOCOMMIT_KEY=$(openssl rand -base64 8):$(openssl rand -base64 32)
	
	SITE_CLI_LOGIN="$SITE_MAIN/cli-login?key=$AUTOCOMMIT_KEY"
	
	open "$SITE_CLI_LOGIN"
	
	echo
	echo "$SITE_CLI_LOGIN"
	echo
	
	# add the key to the users global git config
	git config --global user.autocommitkey $AUTOCOMMIT_KEY
	exit
else
	echo "Found Autocommit key"
fi

# do an api call to autocommit api

COMMIT_MSG_FILE=$1 # file to put final commit message into
COMMIT_SOURCE=$2 # user input from -m or -F
SHA1=$3
# parse input from git

function get_hidden_key {
        # hash our key and the current 10 second interal in the epoch
        # creates a new key that the server will know, and expires in 10 seconds
        # we use the part before the : as the identifier, and the part after as the hashed part
        local identifier=$(echo $AUTOCOMMIT_KEY | cut -f 1 -d :)
        local ten_second_interval=$(ruby -e 'puts (Time.now.to_f/10).truncate()')
        local hidden_key=$(echo $(echo $AUTOCOMMIT_KEY | cut -f 2 -d :)$ten_second_interval | md5)
        echo $identifier:$hidden_key
	# return the hidden key
        # should be secure enough, since we already have ssl
        # md5 isn't secure because hash collisions can be found.
        # since ours changes every 10 seconds, it is essentially secure
        # also, md5 has a simple plain js implementation, and is "generally faster than sha256"
}

diff=$(mktemp /tmp/diff.XXXXXX)
git diff $(git log -n 1 | grep "^commit" | cut -f 2 -d " ") > $diff
# makes the diff between HEAD and the staged working tree

curl -s \
	"$API_ENDPOINT/autocommit?key=$(get_hidden_key)" \
	-H 'Content-Type: application/json' \
	--data @$diff \
	>> $COMMIT_MSG_FILE
# gets the autocommit message from my api
# currently outputs nothing if key is wrong

rm $diff
